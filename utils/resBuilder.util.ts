import { HttpStatus } from '@nestjs/common'

export class ResponseBuilder {
  constructor(public msg = '') {}
  // subjects
  user(id: string) {
    this.msg += `User id={${id}}`
    return this
  }

  // success
  updated(where?: Record<string, unknown>) {
    return { message: this.msg + ` updated successfully, where: ${JSON.stringify(where)}` }
  }
  deleted() {
    return { message: this.msg + ' deleted successfully' }
  }

  // errors
  notFound() {
    this.msg += ' not found'
    return this
  }
  mustBe(field: string, dataType: string) {
    this.msg += `${field} must be ${dataType}` // x must be a/an y
    return this
  }

  /**
   * return object as is generated by Nest error filter or ValidationPipe
   */
  errorCode(code: HttpStatus.BAD_REQUEST | HttpStatus.NOT_FOUND) {
    return {
      message: code === HttpStatus.BAD_REQUEST ? [this.msg] : this.msg,
      error: code === HttpStatus.BAD_REQUEST ? 'Bad Request' : 'Not Found',
      statusCode: code,
    }
  }
}
